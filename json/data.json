[
    {
        "type": 0,
        "title": "tetris-optimizer",
        "description": "<p>    <strong>Tetris Optimizer</strong> is a Go program designed to solve the challenge of arranging tetrominoes     into the smallest possible square grid. The program takes a text file as input, containing a list of tetrominoes described in patterns, and outputs an optimized arrangement.  </p>    <h3>Main Features:</h3>  <ul>    <li>      <strong>Space Optimization:</strong> The program arranges the tetrominoes to minimize the size of the square grid.       Each tetromino is identified by an uppercase letter (A, B, C, etc.).    </li>    <li>      <strong>Input Validation:</strong> It verifies that the input text file is correctly formatted and the tetrominoes are valid.       In case of errors, it returns the message Error.    </li>    <li>      <strong>Error Handling:</strong> If the file contains incorrect formats or missing data, the program stops execution and clearly reports the issue.    </li>    <li>      <strong>Tetromino Placement:</strong> If a perfectly compact grid is not possible, spaces are left between pieces to ensure all tetrominoes are placed.    </li>    <li>      <strong>Simple Interface:</strong> The program runs via the command line, requiring only one argument: the path to the input text file.    </li>  </ul>    <h3>Technical Details:</h3>  <ul>    <li><strong>Programming Language:</strong> Go</li>    <li>      <strong>Algorithm:</strong> A backtracking approach is used to place tetrominoes in the most optimal way.    </li>    <li>      <strong>Input Format:</strong> A text file where each tetromino is described by a grid pattern       (with # representing occupied blocks and \" . \" representing empty spaces).    </li>    <li>      <strong>Output Format:</strong> A grid printed in the terminal, with each tetromino labeled by a unique letter.    </li>  </ul>    <h3>Edge Cases:</h3>  <ul>    <li>      If the input file is empty or incorrectly formatted, the program prints: Error.    </li>    <li>      If a perfect arrangement is not feasible, spaces are left between tetrominoes in the grid.    </li>  </ul>    <h3>Highlights:</h3>  <ul>    <li><strong>Performance:</strong> The use of Go ensures fast and efficient execution, even with a large number of tetrominoes.</li>    <li><strong>Robustness:</strong> Rigorous error handling ensures the program operates correctly across various scenarios.</li>    <li><strong>Extensibility:</strong> The modular structure of the code makes it easy to add features or improve algorithms.</li>  </ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "Golang",
        "github": "https://github.com/minwolf999/tetris-optimizer.git",
        "images": ["./static/image/school/tetris-optimizer/exemple03.png"]
    },

    {
        "type": 0,
        "title": "ascii-art-web",
        "description": "<p>The Ascii-Art-Web project is a web-based graphical user interface for generating Ascii art banners. It provides a simple interface where users can input text, select a banner style, and generate the corresponding Ascii art on the server. The project consists of an <code><i>HTTP</i></code> server built using Go and uses Html templates to render the user interface and display the results of Ascii art generation.</p>    <h2>Objective</h2>    <p>The main goal of this project is to create a web application that takes user input, processes it through a server that generates Ascii art, and displays the result to the user. The application allows the user to choose between different banner styles, including:</p>    <ul>        <li><strong>Shadow</strong></li>        <li><strong>Standard</strong></li>        <li><strong>Thinkertoy</strong></li>    </ul>    <p>The project aims to provide a user-friendly interface where users can interact with the server to create customized Ascii art and display it on a webpage.</p>    <h2>How It Works</h2>    <p>The application is built using the following structure:</p>    <ul>        <li><strong>Backend (Go Server):</strong> The server is written in Go, which processes POST requests for Ascii art generation. It also serves the Html pages (via Go templates) and handles HTTP requests for displaying results.</li>        <li><strong>Frontend (Html and CSS):</strong> The frontend allows users to input text, choose a banner style via radio buttons or a select element, and then submit their request to the server. The result is displayed either on a new page or directly on the same page after the request is completed.</li>        <li><strong>HTTP Endpoints:</strong>             <ul>                <li><strong>GET /</strong>: Serves the main Html page where the user can input text and choose a banner style.</li>                <li><strong>POST /ascii-art</strong>: Receives the user's input (text and selected banner style), generates the Ascii art on the server, and displays the result.</li>            </ul>        </li>    </ul>    <h3>Features</h3>    <ul>        <li><strong>Text Input:</strong> A text input field allows users to enter the text that will be transformed into Ascii art.</li>        <li><strong>Banner Selection:</strong> Radio buttons or a dropdown (select element) are used to choose between different banner styles (Shadow, Standard, Thinkertoy).</li>        <li><strong>POST Request:</strong> A button triggers a POST request to the /ascii-art route, sending the text and banner style to the Go server.</li>        <li><strong>Display Results:</strong> The server processes the request and sends back the generated Ascii art, which is displayed on the webpage.</li>    </ul>    <h2>Technologies Used</h2>    <p>The project utilizes the following technologies:</p>    <ul>        <li><strong>Backend:</strong> Go (Golang) is used to create the server, which processes Ascii art generation requests and renders Html templates.</li>        <li><strong>Frontend:</strong> The frontend is created using Html for the page structure, CSS for styling.</li>        <li><strong>Go Templates:</strong> Html templates are used to dynamically generate content, like the Ascii art, based on the user’s input.</li>    </ul>",
        "collaborators": ["Mathias MARCHETTI", "Philippe LECROSNIER", "Antoine MARVIN", "Anthony YUNG", "Romain LEVASSEUR", "Cyril RAMANANJAONA"],
        "langage": "Golang",
        "github": "https://github.com/minwolf999/ascii-art-web.git",
        "images": ["./static/image/school/ascii-art-web/terminal1.png", "./static/image/school/ascii-art-web/terminal2.png", "./static/image/school/ascii-art-web/site.png"]
    },

    {
        "type": 0,
        "title": "groupie-tracker",
        "description": "<p>The Groupie-Tracker project involves building a website that visualizes and manipulates data from an API. The website displays information about artists, their concerts, and upcoming events using an interactive and user-friendly interface. The data is provided through an API consisting of several parts, including details about artists, their concert locations, dates, and their relationships.</p>    <h2>Objective</h2>    <p>The main objective of the project is to create a website that receives data from a provided API and uses it to display detailed information about various music artists, their concert schedules, and locations. The project also includes the creation of events or actions that are triggered by the client and require communication with the server to retrieve the information.</p>    <h2>How It Works</h2>    <p>The project consists of both a backend and frontend component:</p>    <ul>        <li><strong>Backend:</strong> Written in Go, the backend handles communication with the API, retrieves the necessary data, and provides the information to the frontend.</li>        <li><strong>Frontend:</strong> The website displays the retrieved data in a variety of formats such as cards, blocks, tables, lists, or graphics. The user can interact with the data, triggering events that send requests to the server, which in turn responds with updated data.</li>    </ul>    <h3>API Structure</h3>    <p>The provided API consists of four main parts:</p>    <ul>        <li><strong>Artists:</strong> Contains information about bands and artists, including their name(s), image, year of activity, first album date, and band members.</li>        <li><strong>Locations:</strong> Lists the locations of the artists' last and/or upcoming concerts.</li>        <li><strong>Dates:</strong> Provides the dates of the artists' last and/or upcoming concerts.</li>        <li><strong>Relation:</strong> Links the data between artists, dates, and locations.</li>    </ul>    <h3>Features</h3>    <ul>        <li><strong>Data Visualization:</strong> The project utilizes various data visualizations to display the artist's information, concert schedules, and other details in an interactive and user-friendly format.</li>        <li><strong>Client-Server Communication:</strong> The website implements actions that trigger communication between the client and the server. This allows the website to dynamically fetch and display new data when the user interacts with the site.</li>        <li><strong>Event Handling:</strong> Events on the website, such as button clicks or page loads, trigger actions that result in data being fetched from the server and displayed on the frontend.</li>        <li><strong>Error Handling:</strong> The backend and frontend must handle errors gracefully, ensuring that the website and server do not crash at any point and that the user experience remains smooth.</li>    </ul>    <h2>Technologies Used</h2>    <p>The project utilizes the following technologies:</p>    <ul>        <li><strong>Backend:</strong> Go (Golang) is used for creating the server that handles API communication and responds to client requests.</li>        <li><strong>Frontend:</strong> The frontend is built with Html, CSS to create a visually appealing interface.</li>        <li><strong>API Integration:</strong> The website interacts with the provided API to fetch and display artist, concert, and location data in real-time.</li>    </ul>    <h2>Usage</h2>    <p>Once the server and frontend are set up, the website will display various artist and concert data dynamically. The user can interact with the website to view the artists' details, upcoming concerts, and event locations. The site will send requests to the server based on user actions (e.g., viewing details of an artist or concert).</p>    <h2>Code Structure</h2>    <p>The backend Go code is structured to handle requests and process data from the API. It includes routes for retrieving data about artists, concerts, and locations. The frontend JavaScript code handles the user interface, sends requests to the server, and processes the server's responses to update the webpage.</p>",
        "collaborators": ["Simon LECUREUX", "Philippe LECROSNIER", "Antoine MARVIN", "Romain LEVASSEUR"],
        "langage": "Golang",
        "github": "https://github.com/minwolf999/groupie-tracker.git",
        "images": ["./static/image/school/groupie-tracker/loading.png", "./static/image/school/groupie-tracker/started.png", "./static/image/school/groupie-tracker/accueil.png"]
    },

    {
        "type": 0,
        "title": "net-cat",
        "description": "<p>The NetCat (TCP Chat) project is a Go-based implementation of a chat server and client using the TCP protocol. The program mimics the behavior of the popular NetCat tool, designed to handle both server and client functionalities in a chat system. Clients connect to the server, exchange messages, and the server broadcasts messages to all connected clients.</p>    <h2>Objective</h2>    <p>The goal of this project is to recreate the NetCat utility in a server-client architecture using Go. The program should be capable of establishing TCP connections between a server and multiple clients (1-to-many relation), enabling communication in a chat format with several features including user identification, message time-stamping, and handling the joining/leaving of clients.</p>    <h2>How It Works</h2>    <p>The program consists of two components:</p>    <ul>        <li><strong>Server:</strong> The server listens on a specified port and manages multiple client connections. It broadcasts messages to all connected clients and notifies clients when someone joins or leaves the chat.</li>        <li><strong>Client:</strong> Clients connect to the server and send messages to the chat. Each client must identify itself with a unique name and will see the messages from other clients along with the timestamp and username.</li>    </ul>        <h3>Key Features</h3>    <ul>        <li><strong>TCP Connections:</strong> Establishes a TCP connection between the server and clients, allowing real-time communication.</li>        <li><strong>Client Identification:</strong> Clients are required to provide their name upon connecting to the server. This name is used to identify the sender of each message.</li>        <li><strong>Message Timestamping:</strong> All messages are timestamped with the exact time they were sent and are associated with the client's name (e.g., [2020-01-20 16:03:43][ClientName]: Message).</li>        <li><strong>Join/Leave Notifications:</strong> When a client joins or leaves the chat, all other clients are notified by the server.</li>        <li><strong>Client Limitation:</strong> The server can handle a maximum of 10 concurrent client connections.</li>        <li><strong>Port Handling:</strong> If no port is specified, the program uses a default port (8989). If a port is specified, it must be passed as an argument when running the server.</li>        <li><strong>Interactive Chat:</strong> Clients can send messages in real-time and receive messages from all other connected clients.</li>    </ul>    <p>Once a client connects to the server, it will be greeted with a Linux logo and prompted to enter a name. The chat interface will then allow the client to send and receive messages in the chat.</p>    <h2>Programming Language</h2>    <p>This project is written in <strong>Go</strong>, taking advantage of Go's concurrency model using goroutines and channels to handle multiple client connections efficiently. The program handles errors from both the server and client sides and ensures smooth communication in the chat system.</p>    <h2>Instructions for Implementation</h2>    <ul>        <li><strong>Server:</strong> Create a TCP server that listens for incoming connections. Upon accepting a connection, prompt the client for a name and manage communication.</li>        <li><strong>Client:</strong> Create a client that connects to the server, sends messages, and receives messages from others in real-time.</li>        <li><strong>Message Broadcasting:</strong> The server should broadcast every message to all connected clients, and the messages should include the timestamp and the client's name.</li>        <li><strong>Error Handling:</strong> Handle errors gracefully both on the server and client sides, ensuring the application remains stable.</li>        <li><strong>Client Limits:</strong> Implement a maximum connection limit of 10 clients to prevent overload.</li>    </ul>",
        "collaborators": ["Cyril RAMANANJAONA", "Philippe LECROSNIER", "Antoine MARVIN"],
        "langage": "Golang",
        "github": "https://github.com/minwolf999/net-cat.git",
        "images": ["./static/image/school/net-cat/launch.png", "./static/image/school/net-cat/connection.png", "./static/image/school/net-cat/chat.png"]
    },

    {
        "type": 0,
        "title": "lem-in",
        "description": "<p>The Lem-In project is designed to simulate an ant farm, where ants need to traverse a colony composed of rooms and tunnels. The goal of the program is to efficiently find the shortest path for the ants from the starting room (##start) to the ending room (##end), while managing potential traffic jams and optimizing movement.</p>    <h2>Objective</h2>    <p>The main objective of this project is to develop a program called <strong>lem-in</strong> that reads input data describing an ant farm and calculates the shortest path for a given number of ants. The program must also handle errors gracefully, ensuring that invalid or poorly formatted data does not crash the system.</p>    <h2>How it Works</h2>    <p>The ant farm consists of rooms and tunnels connecting them. The program starts with all the ants in the ##start room, and the goal is to move them through the tunnels to the ##end room as quickly as possible, minimizing the number of moves required. The tunnels can be connected to multiple rooms, and each room can hold only one ant at a time (except the start and end rooms).</p>    <h3>Key Features</h3>    <ul>        <li><strong>Pathfinding:</strong> The program must find the shortest path for the ants from the start room to the end room.</li>        <li><strong>Ant Movement:</strong> Ants move through tunnels one step at a time, avoiding traffic jams and ensuring no other ant occupies the same room.</li>        <li><strong>Error Handling:</strong> The program must handle various errors such as invalid room names, incorrect tunnel connections, and improperly formatted input data.</li>        <li><strong>Efficient Output:</strong> The program only displays the movements of ants that have moved, and prints the results in a clear and organized format.</li>    </ul>    <h2>Input and Output Format</h2>    <p>The program takes input from a file passed as an argument. The file contains information about rooms, tunnels, and ants, in the following format:</p>    <p>In this example, rooms are defined by their name and coordinates (e.g., \"1 23 3\"), while tunnels are represented by two room names connected with a dash (e.g., \"0-4\"). The ##start and ##end denote the starting and ending rooms, respectively.</p>    <h3>Program Output</h3>    <p>The program outputs the following information:</p>    <ul>        <li>The number of ants.</li>        <li>The list of rooms in the colony.</li>        <li>The list of tunnels connecting the rooms.</li>        <li>Each move made by the ants, showing the movement of each ant from room to room.</li>    </ul>    <p>Where <strong>x, z, r</strong> are the numbers of the ants (from 1 to number_of_ants) and <strong>y, w, o</strong> are the room names where the ants are moving.</p>    <h2>Instructions</h2>    <p>The program should implement the following functionalities:</p>    <ul>        <li><strong>Room and Tunnel Creation:</strong> Create rooms and connect them using tunnels. Ensure there is no duplicate or invalid room or tunnel.</li>        <li><strong>Ant Management:</strong> Place ants in the start room and move them along the shortest path toward the end room. Avoid traffic and ensure each ant moves one step at a time.</li>        <li><strong>Error Handling:</strong> Validate the input data to ensure no errors such as invalid room names, duplicate tunnels, or unknown commands.</li>    </ul>    <h2>Programming Language</h2>    <p>The program is written in <strong>Go</strong>, leveraging its simplicity and efficiency to handle the logic of room traversal, error handling, and ant management. The code must adhere to good programming practices and be well-structured.</p>",
        "collaborators": ["Mathias MARCHETTI", "Romann BELMER", "Antoine MARVIN"],
        "langage": "Golang",
        "github": "https://github.com/minwolf999/lem-in.git",
        "images": ["./static/image/school/lem-in/exemple02.png"]
    },

    {
        "type": 0,
        "title": "atm-management-system",
        "description": "<p>The ATM Management System is a C-based application designed to demonstrate programming logic and the ability to adapt to new languages. The system is built to manage user accounts and perform various banking operations such as account creation, account management, transactions, and more.</p>    <h2>Objective</h2>    <p>The main goal of this project is to showcase your understanding of C programming through the development of an ATM management system. You will enhance an existing codebase by implementing several essential banking features.</p>    <h2>Key Features</h2>    <ul>        <li><strong>Login and Registration:</strong> Users can create new accounts and log in to access the system.</li>        <li><strong>Account Management:</strong> Users can update account details (e.g., country, phone number), check account details, and delete accounts.</li>        <li><strong>Transactions:</strong> Users can make transactions, including deposits and withdrawals. Certain account types (e.g., savings, fixed) have specific rules.</li>        <li><strong>Account Transfer:</strong> Users can transfer account ownership to another user, updating the respective data files.</li>        <li><strong>Interest Calculation:</strong> For savings and fixed accounts, the system calculates and displays the interest accrued over time.</li>    </ul>    <h2>Features to Implement</h2>    <p>The following features are required to be implemented by the developer:</p>    <ul>        <li><strong>Registration:</strong> Users must be able to register new accounts with unique names. This data will be saved in the system's files.</li>        <li><strong>Account Updates:</strong> Users can modify their country or phone number associated with their account. These changes will be reflected in the data files.</li>        <li><strong>Account Details:</strong> Users can view detailed information about individual accounts, including interest rates for different account types.</li>        <li><strong>Transactions:</strong> Users can withdraw or deposit funds into certain accounts. Fixed accounts (1-3 year) cannot make transactions.</li>        <li><strong>Account Deletion:</strong> Users can delete their own accounts, and the system will update the data files accordingly.</li>        <li><strong>Account Ownership Transfer:</strong> Users can transfer account ownership to another user, and this will be saved in the system's files.</li>    </ul>    <h2>File System</h2>    <p>The project follows a simple file-based system to store data: <strong>users.txt</strong> stores user credentials, and <strong>records.txt</strong> stores account details, including account types, balances, and transaction history.</p>    <h2>Bonus Features</h2>    <p>For those interested in going beyond the basics, the following bonus features are available:</p>    <ul>        <li><strong>Instant Transfer Notifications:</strong> Using pipes and child processes, users will receive immediate notifications when an account transfer occurs.</li>        <li><strong>Improved Terminal Interface:</strong> Enhance the terminal user interface (TUI) to provide a more user-friendly experience.</li>        <li><strong>Password Encryption:</strong> Implement encryption to secure user passwords.</li>        <li><strong>SQLite Database Integration:</strong> Replace the file system with an SQLite database for storing user and account information, providing better scalability and reliability.</li>    </ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "C",
        "github": "https://github.com/minwolf999/atm.git",
        "images": ["./static/image/school/atm/logMenu.png", "./static/image/school/atm/mainMenu.png"]
    },

    {
        "type": 0,
        "title": "forum",
        "description": "<p>This project aims to create a fully functional web forum where users can:</p><ul>  <li>Communicate with each other by creating posts and comments.</li>  <li>Associate categories to posts for better organization.</li>  <li>Like and dislike posts and comments.</li>  <li>Filter posts by categories, creation date, and user interactions (like/dislike).</li></ul><h3>Database: SQLite</h3><p>For this forum, you will use <strong>SQLite</strong> to store data such as users, posts, comments, and likes. SQLite is an embedded database, perfect for local/client storage, and it's commonly used in web applications for lightweight storage.</p><p>To structure your database and achieve optimal performance, we highly recommend creating an <strong>Entity-Relationship Diagram (ERD)</strong> and building your database schema based on it.</p><p>Your database must handle the following SQL queries:</p><ul>  <li>CREATE query to create tables (e.g., users, posts, comments, likes).</li>  <li>SELECT query to retrieve data (e.g., fetching posts, comments, or user details).</li>  <li>INSERT query to add new records (e.g., new user registration or a new post).</li></ul><h3>Authentication</h3><p>The forum should support user authentication. Users must be able to:</p><ul>  <li><strong>Register</strong> by providing their credentials:</li>  <ul>    <li>Email (must be unique; return error if already taken).</li>    <li>Username.</li>    <li>Password (should be encrypted when stored, bonus task).</li>  </ul>  <li><strong>Login</strong> to access the forum and perform actions such as posting or commenting.</li>  <li>Use <strong>cookies</strong> to maintain a session for each user with an expiration date (your choice of duration). This ensures that each user can only have one active session at a time.</li>  <li>Handle errors if the credentials do not match or if there are issues during registration or login.</li></ul><h3>Communication</h3><p>For users to communicate, they must be able to:</p><ul>  <li>Create posts and comments.</li>  <li>Associate one or more <strong>categories</strong> with each post. You are free to choose the category structure (e.g., topics, subforums).</li>  <li>Allow both registered and non-registered users to see posts and comments. However, only registered users can create posts and comments.</li></ul><h3>Likes and Dislikes</h3><p>Only registered users can like or dislike posts and comments. The number of likes and dislikes for each post or comment should be visible to all users, whether registered or not.</p><h3>Filters</h3><p>You will implement a filtering mechanism for users to filter posts by:</p><ul>  <li><strong>Categories:</strong> Users can filter posts based on the category.</li>  <li><strong>Creation Date:</strong> Users can filter posts by the date they were created.</li>  <li><strong>Liked Posts:</strong> Registered users can filter posts by those they have liked or disliked.</li></ul><p>Note that filtering by categories, creation date, and liked posts is only available to registered users and must apply to their personal data (e.g., their liked posts).</p><h3>Docker</h3><p>You must use <strong>Docker</strong> to containerize your forum project. This ensures your application is portable and can be deployed consistently. You can read more about Docker in the <code>ascii-art-web-dockerize</code> topic.</p><h3>Instructions</h3><ul>  <li><strong>Database:</strong> Use <strong>SQLite</strong> for storing user data, posts, comments, and likes.</li>  <li><strong>Error Handling:</strong> Properly handle website errors and HTTP status codes. Ensure that technical errors (e.g., failed database connections, incorrect SQL queries) are handled gracefully.</li>  <li><strong>Code Quality:</strong> Ensure the code follows good practices, such as modularity, readability, and maintainability. Use meaningful variable and function names, avoid repetition, and keep the code DRY (Don’t Repeat Yourself).</li>  <li><strong>Testing:</strong> It is recommended to include test files for unit testing. Ensure that your code is tested thoroughly for edge cases and expected behavior.</li></ul>",
        "collaborators": ["Antoine MARVIN", "Anthony YUNG", "Mathias MARCHETTI", "Gwendal BENARD", "Romann BELMER"],
        "langage": "Golang",
        "github": "https://github.com/minwolf999/forum.git",
        "images": ["./static/image/school/forum/login.png", "./static/image/school/forum/home.png", "./static/image/school/forum/post.png", "./static/image/school/forum/profil.png"]
    },

    {
        "type": 0,
        "title": "make-your-game",
        "description": "<p>The objective of this project is to create a smooth-running game using only <strong>plain JavaScript</strong>, <strong>Html</strong>, and <strong>Dom</strong>. The game should be built from scratch without the use of frameworks or canvas, and it should run efficiently at a consistent frame rate of 60 FPS (frames per second) with no frame drops.</p><h3>Game Features</h3><ul>  <li><strong>Game Performance:</strong>    <ul>      <li>The game must run at a steady <strong>60 FPS</strong> at all times.</li>      <li>No frame drops are allowed!</li>      <li>Make proper use of RequestAnimationFrame for smooth and continuous animation.</li>      <li>Since performance in JavaScript can be unpredictable, you will need to measure performance and optimize the code. Performance will be tested to ensure smooth gameplay.</li>    </ul>  </li>  <li><strong>Pause Menu:</strong>    <ul>      <li>The game should have a <strong>Pause Menu</strong> that includes the following options:        <ul>          <li><strong>Continue:</strong> Resumes the game without resetting progress.</li>          <li><strong>Restart:</strong> Restarts the game from the beginning.</li>        </ul>      </li>      <li>Ensure that the game frames do not drop when the game is paused.</li>    </ul>  </li>  <li><strong>Scoreboard:</strong>    <ul>      <li>Display a <strong>Countdown Clock or Timer</strong> that shows the remaining time until the game ends or the time the game has been running.</li>      <li>Display the <strong>Score</strong> (XP or points) that tracks the player's progress.</li>      <li>Display the number of <strong>Lives</strong> remaining for the player.</li>    </ul>  </li>  <li><strong>Rendering Performance:</strong>    <ul>      <li>Use minimal layers to optimize rendering performance, but don’t avoid layers completely.</li>    </ul>  </li></ul><h3>Instructions</h3><ul>  <li><strong>Smooth Animation:</strong> The animation must have consistent motion. To achieve this, your game should run at 60 FPS without interruptions (no “jank” or stutter). If your game experiences frame drops or inconsistent animation, it will be noticeable to players and affect the user experience.</li>  <li><strong>Keyboard Controls:</strong> The game should be playable using only the keyboard. The controls should be smooth, meaning:    <ul>      <li>If a key is held down, the relevant action (such as moving or jumping) should continue without interruption.</li>      <li>If the key is released, the action should stop immediately.</li>    </ul>  </li>  <li><strong>Pause Functionality:</strong> Implement a pause feature that allows users to pause, restart, and continue the game at any time during gameplay. Even when paused, the game should maintain consistent frame rendering without any drops.</li></ul><h3>Pre-Approved Game Genres</h3><p>The game must be built based on one of the following genres:</p><ul>  <li><strong>Bomberman</strong></li>  <li><strong>Flipper/Pinball</strong></li>  <li><strong>Space Invaders</strong></li>  <li><strong>Donkey Kong</strong></li>  <li><strong>Brick Breaker/Arkanoid</strong></li>  <li><strong>Pac-Man</strong></li>  <li><strong>Super Mario</strong></li>  <li><strong>Tetris</strong></li>  <li><strong>Duck Hunt</strong></li></ul><h3>Developer Tools</h3><p>We strongly recommend using the Developer Tools available in all modern browsers to help with the development of this project. Some key tools are:</p><ul>  <li><strong>Page Inspector:</strong> View and edit page content and layout in real-time.</li>  <li><strong>Web Console:</strong> View console.log messages and interact with the page using JavaScript.</li>  <li><strong>Performance Tool:</strong> This tool is crucial for analyzing the general responsiveness and performance of your site. You can use it to record a sample of your interactions with the site and monitor the FPS, check for frame drops, and analyze how long your functions take to execute.</li>  <li><strong>Paint Flashing:</strong> This option highlights each paint action that happens on the page as the game runs, helping you identify inefficient renderings.</li></ul><h3>Performance Monitoring</h3><p>It is crucial to monitor the performance of your game to ensure smooth and fluid animation. Use the <strong>Performance Tool</strong> in the browser's developer tools to:</p><ul>  <li>Record FPS and check for frame drops.</li>  <li>Analyze the performance of JavaScript functions and rendering times.</li>  <li>Identify any bottlenecks or slow rendering that might affect gameplay.</li></ul>",
        "collaborators": ["Simon LECUREUX", "Romain LEVASSEUR", "Antoine MARVIN"],
        "langage": "Javascript",
        "github": "https://github.com/minwolf999/make-your-game.git",
        "images": ["./static/image/school/make-your-game/starting.png", "./static/image/school/make-your-game/new-wave.png", "./static/image/school/make-your-game/game-over.png"]
    },

    {
        "type": 0,
        "title": "real-time-forum",
        "description": "<p>The <strong>Real-Time Forum</strong> project requires you to develop a complete forum application from scratch. This forum will be built using the following technologies:</p><ul>  <li><strong>SQLite</strong> for storing data (like user information, posts, and messages).</li>  <li><strong>Golang</strong> for handling data processing and Websockets (Backend).</li>  <li><strong>Javascript</strong> for managing frontend events and Websockets (Frontend).</li>  <li><strong>Html</strong> for structuring the page and organizing elements.</li>  <li><strong>Css</strong> for styling the page and its elements.</li></ul><p>You will work with a <strong>single-page application</strong> (SPA), meaning there will only be one Html page and all changes to the page, such as switching views, will be handled dynamically using Javascript. Your main focus is to ensure that users can register, log in, create posts and comments, and send private messages in real time.</p><h3>Key Features</h3><ul>  <li><strong>Registration and Login:</strong>    <ul>      <li>Users must be able to register by filling out a form with the following details:        <ul>          <li>Nickname</li>          <li>Age</li>          <li>Gender</li>          <li>First Name</li>          <li>Last Name</li>          <li>Email</li>          <li>Password</li>        </ul>      </li>      <li>Users can log in using either their nickname or email combined with their password.</li>      <li>Users should be able to log out from any page on the forum.</li>    </ul>  </li>  <li><strong>Posts and Comments:</strong>    <ul>      <li>Users can create posts, which are categorized (similar to the first forum).</li>      <li>Users can create comments on posts.</li>      <li>Users can see posts in a feed display, and comments will only be visible when the post is clicked.</li>    </ul>  </li>  <li><strong>Private Messages:</strong>    <ul>      <li>Users can send private messages to each other. There will be:        <ul>          <li>A section showing who is online and available to talk to. The list should be sorted by the last message sent or alphabetically for new users with no messages.</li>          <li>Users can send private messages only to those who are online.</li>        </ul>      </li>      <li>The private message section must always be visible on the page.</li>      <li>Clicking on a user's name should reload past conversations with that user and display the last 10 messages.</li>      <li>If users scroll up to see older messages, an additional 10 messages should be loaded dynamically, without overwhelming the scroll event (e.g., by throttling or debouncing the scroll action).</li>      <li>Messages should display:        <ul>          <li>Date of the message.</li>          <li>Username of the sender.</li>        </ul>      </li>      <li>Messages must be delivered in real time, meaning that when one user sends a message, the other user should immediately receive the notification without refreshing the page (this will be done using WebSockets for real-time communication).</li>    </ul>  </li></ul><h3>Technological Overview</h3><ul>  <li><strong>SQLite:</strong> You will use SQLite as your database to store user data, posts, and private messages. This is the same as in the first forum but implemented for the new structure.</li>  <li><strong>Golang:</strong> Golang will handle the server-side logic for WebSockets, user management, posts, comments, and private messaging functionality. The backend will use WebSockets to ensure real-time communication.</li>  <li><strong>Javascript:</strong> Javascript will be responsible for managing frontend events (like sending messages, creating posts, and switching views). It will also handle WebSockets on the frontend to ensure real-time updates without refreshing the page.</li>  <li><strong>Html:</strong> The structure of the page will be organized using Html. All pages and components will be built into a single-page application, with different views toggled using Javascript.</li>  <li><strong>Css:</strong> CSS will be used to style the page, ensuring a responsive and user-friendly interface.</li></ul><h3>Project Structure</h3><p>The Real-Time Forum will consist of the following components:</p><ul>  <li><strong>Registration and Login:</strong> Users must be able to register, log in, and log out. After logging in, they will gain access to the main forum page where they can interact with posts, comments, and private messages.</li>  <li><strong>Posts and Comments:</strong> Users can create new posts and categorize them. They can also create comments under posts. The feed will display all posts, and users can view comments by clicking on the posts.</li>  <li><strong>Private Messaging:</strong> Users will have access to a private messaging feature that shows online users, allows users to send messages, and displays past conversations. The messages will load dynamically in real-time using WebSockets.</li></ul><h3>Technologies to Be Used</h3><ul>  <li><strong>SQLite:</strong> Use SQLite to store all necessary data like user information, posts, and private messages.</li>  <li><strong>Golang:</strong> Build the backend using Golang to handle all business logic, user management, and WebSocket connections.</li>  <li><strong>WebSockets:</strong> Use WebSockets for real-time communication for the private messaging system.</li>  <li><strong>Html & Css:</strong> Design the page layout and elements using Html and CSS, with a focus on clean, responsive design.</li>  <li><strong>Javascript:</strong> Implement frontend interactivity, manage WebSocket connections, and handle dynamic content updates using Javascript.</li></ul><h3>Real-Time Communication</h3><p>One of the key features of this forum is its real-time nature. Users should be able to send and receive messages instantly without refreshing the page. This will be accomplished by:</p><ul>  <li>Using WebSockets for real-time communication between users and the server.</li>  <li>Ensuring that messages are delivered and displayed in real-time without requiring the user to reload the page.</li>  <li>Handling the message feed efficiently with dynamic loading (10 messages at a time) and throttling or debouncing the scroll event to prevent performance issues.</li></ul>",
        "collaborators": ["Antoine MARVIN", "Mathias MARCHETTI"],
        "langage": "Golang, Javascript",
        "github": "https://github.com/minwolf999/real-time-forum.git",
        "images": ["./static/image/school/real-time-forum/login.png", "./static/image/school/real-time-forum/accueil.png", "./static/image/school/real-time-forum/chat.png"]
    },

    {
        "type": 0,
        "title": "mister-quizz",
        "description": "<p><strong>Mister Quiz</strong> is a web project that allows users to participate in a quiz game, similar to the famous \"Who Wants to Be a Millionaire?\". The project is written in <strong>PHP</strong> and uses the <strong>Laravel</strong> framework. The code is already partially developed, and your task is to complete it in order to meet the functional requirements outlined in the project instructions.</p><h3>Key Features</h3><ul>  <li><strong>User Management:</strong>    <ul>      <li>Registration and login for users with username, email, password, and password confirmation.</li>      <li>Users can log in with their email and password, and an error message is displayed for incorrect credentials.</li>      <li>After logging in, users are redirected to the homepage where they can access various features.</li>    </ul>  </li>  <li><strong>Homepage:</strong>    <ul>      <li>The homepage contains at least three buttons:        <ul>          <li><strong>Login/Profile</strong>: If the user is not logged in, the Login button is visible; otherwise, the Profile button is displayed.</li>          <li><strong>Leaderboard</strong>: Displays a list of the top players.</li>          <li><strong>Start Quiz</strong>: Starts the quiz for the user (redirects to the Login page if the user is not logged in).</li>          <li><strong>Logout</strong>: Shown only if the user is logged in.</li>        </ul>      </li>    </ul>  </li>  <li><strong>Quiz:</strong>    <ul>      <li>Upon clicking \"Start Quiz\", logged-in users are presented with quiz questions and answers, which they can select.</li>      <li>The quiz questions are categorized (Art, History, Geography, Science, Sports), and users must answer all questions before submitting.</li>      <li>Once the quiz is submitted, users are shown their results: total correct answers and performance per category.</li>    </ul>  </li>  <li><strong>Profile:</strong>    <ul>      <li>The user's profile page displays:        <ul>          <li>Username, email, XP, and rank (Quiz Apprentice, Average Quizer, Epic Quizer, or Quiz Master based on XP).</li>          <li>Percentage of correct answers and the number of correct answers per category.</li>        </ul>      </li>    </ul>  </li>  <li><strong>Leaderboard:</strong>    <ul>      <li>The leaderboard displays the top 10 players ranked by XP, showing their username, XP, and total correct answers.</li>    </ul>  </li></ul><h3>Project Specificity</h3><p>The Mister Quiz project is not developed from scratch: the codebase is already partially built, and your role is to complete it to meet the requirements provided.</p><p>Your responsibilities include:</p><ul>  <li>Completing the authentication and registration system.</li>  <li>Implementing quiz functionality, ensuring questions are presented correctly, and answers are stored properly.</li>  <li>Updating user profiles and handling user XP and category scores after each quiz.</li>  <li>Creating the leaderboard page to display the top players.</li>  <li>Fixing errors and ensuring the site functions correctly when users start a quiz, submit answers, and view results.</li></ul><h3>Technical Objectives</h3><ul>  <li><strong>Modularity with Laravel:</strong>    <ul>      <li>Utilize Laravel's controllers to handle the backend logic for authentication, quiz management, and user profiles.</li>      <li>Make use of Laravel's database migrations and models to manage the quiz questions, users, and results.</li>    </ul>  </li>  <li><strong>Database Management:</strong>    <ul>      <li>Set up a MySQL database to store user data, quiz questions, and scores.</li>      <li>Apply migrations to set up tables for users, quiz questions, answers, and scores.</li>    </ul>  </li>  <li><strong>Dynamic Views with Blade:</strong>    <ul>      <li>Use Laravel's Blade templating engine to display dynamic data (e.g., user profile, quiz results) in the html pages.</li>    </ul>  </li>  <li><strong>Quiz Functionality:</strong>    <ul>      <li>Ensure that users can take a quiz with questions from different categories.</li>      <li>Handle the XP calculation and category scoring after each quiz submission.</li>      <li>Prevent users from submitting the quiz until all questions are answered.</li>    </ul>  </li>  <li><strong>Leaderboard Implementation:</strong>    <ul>      <li>Implement the leaderboard page to display the top 10 players based on XP.</li>    </ul>  </li></ul><h3>Database and Development Environment</h3><ul>  <li>Set up a database called <strong>mister_quiz</strong> in phpMyAdmin.</li>  <li>Run migrations to set up the required tables for users, questions, answers, and scores.</li>  <li>Use Laravel's artisan commands to create controllers, migrations, and models as needed.</li>  <li>Work with the provided SQL file for questions and answers, or create your own content.</li></ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "PHP Laravel",
        "github": "https://github.com/minwolf999/mister-quizz.git",
        "images": ["./static/image/school/mister-quizz/accueil.png", "./static/image/school/mister-quizz/quizz.png"]
    },

    {
        "type": 0,
        "title": "netfix",
        "description": "<p><strong>Netfix</strong> is a web project simulating a platform where users can act as <strong>customers</strong> or <strong>companies</strong> to request or provide various services, such as plumbing, painting, or cleaning. This project was built using <strong>Django</strong>, a Python framework, and involved working with an existing codebase that needed to be analyzed, completed, and improved to create a functional application.</p> <h3>Key Features</h3> <ul> <li><strong>User Management:</strong> <ul> <li>Registration and login for two user types: <em>customers</em> and <em>companies</em>.</li> <li>Custom profiles displaying user-specific information: <ul> <li>Customers: History of requested services.</li> <li>Companies: List of provided services.</li> </ul> </li> <li>Data validation to ensure unique email and username for each user.</li> </ul> </li> <li><strong>Service Management:</strong> <ul> <li>Companies can create services restricted to their specific fields of expertise.</li> <li>Customers can browse services by category or popularity.</li> <li>Customers can request services, with an automatic cost calculation based on service duration.</li> </ul> </li> <li><strong>Intuitive Navigation:</strong> <ul> <li>Pages showcasing the most popular services, recently created services, and category-specific services.</li> <li>Detailed service pages displaying all relevant information, including the provider's profile.</li> </ul> </li> </ul> <h3>Project Specificity</h3> <p>This project did not start from scratch: a pre-existing codebase was provided with partial implementations of the functionality.</p> <p>My role involved:</p> <ul> <li>Understanding the existing code and identifying missing features.</li> <li>Implementing models, views, and templates to meet the project requirements.</li> <li>Fixing initial errors preventing the application from running correctly.</li> <li>Adding new features and improving the existing design.</li> </ul>  <h3>Technical Objectives</h3>  <ul> <li><strong>Modularity with Django:</strong> <ul> <li>Three distinct apps: users for user management, services for service management, and main for shared features.</li> <li>Utilization of models.py, views.py, and urls.py for business logic, user interactions, and routing.</li> </ul> </li> <li><strong>Relational Database:</strong> <ul> <li>Django models configured to handle users, companies, and services with well-defined relationships.</li> <li>Database migrations to apply and synchronize changes.</li> </ul> </li> <li><strong>Dynamic Templates with Django:</strong> <ul> <li>Integration of dynamic data into html pages using Django templates.</li> <li>Custom forms for user registration, login, and service requests.</li> </ul> </li> <li><strong>User Interface Enhancement:</strong> <ul> <li>Design customization using a pre-existing CSS file and updates to the provided html templates.</li> </ul> </li> </ul>",
        "collaborators": ["Antoine MARVIN", "Mathias MARCHETTI"],
        "langage": "Python Django",
        "github": "https://github.com/minwolf999/netfix.git",
        "images": ["./static/image/school/netfix/accueil.png", "./static/image/school/netfix/request.png"]
    },

    {
        "type": 0,
        "title": "social-network",
        "description": "  <p>    <strong>Social Network</strong> is a full-featured web application that allows users to connect, communicate, and share content, much like modern social media platforms. The project includes a dynamic frontend, a robust backend, and a SQLite database to manage user data and content.  </p>  <h3>Main Features:</h3>  <ul>    <li><strong>Followers System:</strong> Users can follow or unfollow others. For private profiles, follow requests need to be approved.</li>    <li><strong>User Profiles:</strong> Public or private profiles displaying user information, activity, and followers.</li>    <li><strong>Posts and Comments:</strong> Users can create posts with images, set privacy levels, and comment on posts.</li>    <li><strong>Groups:</strong> Users can create and join groups, invite others, post within groups, and organize events with RSVP functionality.</li>    <li><strong>Notifications:</strong> Real-time notifications for events like follow requests, group invitations, and group events.</li>    <li><strong>Chats:</strong> Real-time private chats and group chats with WebSocket support for instant messaging.</li>  </ul>  <h3>Technical Details:</h3>  <ul>    <li><strong>Frontend:</strong> Developed using a JavaScript framework (React.js, Vue.js, etc.) for dynamic and responsive user interactions.</li>    <li><strong>Backend:</strong> Built with Go, featuring RESTful APIs and WebSocket support for real-time communications.</li>    <li><strong>Database:</strong> SQLite is used for storing user data, posts, notifications, and group details.</li>    <li><strong>Authentication:</strong> User sessions and cookies ensure secure login and registration processes.</li>    <li><strong>Images Handling:</strong> Support for JPEG, PNG, and GIF images with file storage.</li>    <li><strong>Dockerized Application:</strong> Separate Docker containers for the frontend and backend ensure smooth deployment.</li>  </ul>  <h3>Features Breakdown:</h3>  <h4>1. Authentication System</h4>  <p>Users can register and log in securely with mandatory fields like Email, Password, and Date of Birth. Optional fields include Nickname, Avatar, and \"About Me\" descriptions.</p>    <h4>2. Profile Management</h4>  <ul>    <li>Users can set their profiles to public or private.</li>    <li>Profiles include personal information, user activity (posts), and followers/following lists.</li>  </ul>  <h4>3. Posts and Privacy</h4>  <p>    Users can create posts, upload images or GIFs, and set privacy levels:  </p>  <ul>    <li><strong>Public:</strong> Visible to all users.</li>    <li><strong>Almost Private:</strong> Visible only to followers.</li>    <li><strong>Private:</strong> Visible to selected followers.</li>  </ul>  <h4>4. Groups and Events</h4>  <ul>    <li>Users can create and manage groups with invitations and requests.</li>    <li>Groups feature a common chat room for members.</li>    <li>Events can be created within groups with RSVP options like \"Going\" or \"Not Going\".</li>  </ul>  <h4>5. Chat System</h4>  <p>    Real-time chats are enabled using WebSocket connections:  </p>  <ul>    <li><strong>Private Chats:</strong> Available between users following each other or for public profiles.</li>    <li><strong>Group Chats:</strong> Shared chat rooms for group members.</li>    <li>Support for sending emojis in chats.</li>  </ul>  <h4>6. Notifications</h4>  <p>    Users receive notifications for:  </p>  <ul>    <li>Follow requests (for private profiles).</li>    <li>Group invitations and join requests.</li>    <li>New events created within groups.</li>  </ul>  <h3>Technical Stack:</h3>  <ul>    <li><strong>Frontend:</strong> JavaScript Framework (React, Next, TailWind), HTML, CSS</li>    <li><strong>Backend:</strong> Go (Golang) with WebSocket integration</li>    <li><strong>Database:</strong> SQLite for data storage</li>    <li><strong>Docker:</strong> Used to containerize the backend and frontend for efficient deployment.</li>    <li><strong>Web Server:</strong> Caddy server or custom server written in Go.</li>  </ul>  <h3>Deployment:</h3>  <p>    The application is containerized using Docker. Backend and frontend images communicate seamlessly, ensuring easy deployment and scalability.  </p>",
        "collaborators": ["Mathias MARCHETTI", "Antoine MARVIN", "Jeremy CAILLY", "Gwendal BENARD", "Louis OLIVIER", "Baran AKSOY"],
        "langage": "Golang, SQLite, Javascript, React, Next, TailWind",
        "github": "https://github.com/minwolf999/SocialNetwork.git",
        "images": [
            "./static/image/school/social-network/login.png", "./static/image/school/social-network/register.png",
            "./static/image/school/social-network/home.png", "./static/image/school/social-network/profile.png",
            "./static/image/school/social-network/group.png", "./static/image/school/social-network/group-chat.png",
            "./static/image/school/social-network/post.png"
        ]
    },




























    

    {
        "type": 1,
        "title": "tirage",
        "description": "<p>    <strong>Random Image Selector</strong> is a web application built with PHP and JavaScript that allows users to randomly select an image from a predefined list.     The application also provides functionality to add new images to the list, ensuring dynamic and customizable content.  </p>    <h3>Main Features:</h3>  <ul>    <li>      <strong>Random Image Selection:</strong> At the click of a button, the application selects and displays an image randomly chosen from the available list.    </li>    <li>      <strong>Image Upload:</strong> Users can upload new images directly through the interface, expanding the pool of random images.    </li>    <li>      <strong>Dynamic Image List:</strong> The list of images is updated in real-time after adding new ones, without the need to reload the page.    </li>    <li>      <strong>User-Friendly Interface:</strong> Simple and intuitive interface with buttons for random selection and image upload.    </li>  </ul>    <h3>Technical Details:</h3>  <ul>    <li><strong>Backend:</strong> PHP handles the image storage and retrieval logic.</li>    <li><strong>Frontend:</strong> JavaScript ensures smooth interaction and updates, including dynamic loading of new images.</li>    <li><strong>Storage:</strong> Uploaded images are stored in a dedicated directory on the server, and their metadata is managed via a JSON file or database.</li>  </ul>    <h3>Highlights:</h3>  <ul>    <li><strong>Interactivity:</strong> Real-time feedback with no page reloads enhances the user experience.</li>    <li><strong>Customizability:</strong> Users can expand the image pool by uploading their favorite images.</li>    <li><strong>Simplicity:</strong> The interface is designed to be minimalistic and easy to use for all users.</li>  </ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "PHP, Javascript",
        "github": "https://github.com/minwolf999/tirage.git",
        "images": ["./static/image/personnal/tirage/accueil.png", "./static/image/personnal/tirage/tirer.png"]
    },

    {
        "type": 1,
        "title": "school-records",
        "description": "<p>    <strong>Preschool Teacher's Assistant</strong> is a web application designed to help kindergarten teachers manage student records and track validated skills. Built with modern web technologies, it provides a user-friendly interface for efficient and organized management of student progress.  </p>    <h3>Main Features:</h3>  <ul>    <li>      <strong>Student Profiles:</strong> Teachers can create, view, and update detailed student profiles, including personal information and progress reports.    </li>    <li>      <strong>Skill Tracking:</strong> Teachers can record and monitor the skills validated for each student, ensuring a clear overview of individual progress.    </li>    <li>      <strong>Search and Filter:</strong> Easily search for students or filter by class, age group, or skill categories for better management.    </li>    <li>      <strong>Data Persistence:</strong> All data is securely stored in an SQLite database, ensuring reliability and accessibility.    </li>    <li>      <strong>Responsive Design:</strong> The website is optimized for various devices, allowing teachers to use it on desktops, tablets, or smartphones.    </li>  </ul>    <h3>Technical Details:</h3>  <ul>    <li><strong>Backend:</strong> Built with Go, ensuring performance and reliability in handling teacher and student data.</li>    <li><strong>Frontend:</strong> Developed using HTML, CSS, and JavaScript for an intuitive and visually appealing interface.</li>    <li><strong>Database:</strong> SQLite is used for lightweight and efficient data storage, suitable for the application’s requirements.</li>    <li><strong>Interactive Features:</strong> JavaScript enables real-time validation and dynamic content updates without page reloads.</li>  </ul>    <h3>Highlights:</h3>  <ul>    <li><strong>Efficiency:</strong> Simplifies the workload of teachers by centralizing student records and skill tracking.</li>    <li><strong>Scalability:</strong> Designed to accommodate multiple teachers and classes, making it suitable for larger preschools.</li>    <li><strong>Usability:</strong> Provides clear navigation and accessibility, ensuring ease of use for non-technical users.</li>  </ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "Golang, Javascript",
        "github": "https://github.com/minwolf999/school-records.git",
        "images": [
            "./static/image/personnal/school-records/accueil.png", "./static/image/personnal/school-records/logged.png",
            "./static/image/personnal/school-records/competences.png", "./static/image/personnal/school-records/ajoutCompetence.png", 
            "./static/image/personnal/school-records/observer.png", "./static/image/personnal/school-records/pdf.png"
        ]
    },

    {
        "type": 1,
        "title": "Encryption",
        "description": "  <p>    <strong>Folder Crypt/Decrypt Tool</strong> is a terminal-based application written in Go, designed to encrypt or decrypt an entire folder, including its subdirectories. Depending on the executable used, the tool either secures sensitive data or restores it to its original state.  </p>    <h3>Main Features:</h3>  <ul>    <li>      <strong>Folder Encryption:</strong> Encrypts all files within a folder and its subdirectories using a secure algorithm.    </li>    <li>      <strong>Folder Decryption:</strong> Decrypts previously encrypted files back to their original state.    </li>    <li>      <strong>Recursive Processing:</strong> Automatically processes subfolders and ensures no file is left unencrypted or undecrypted.    </li>    <li>      <strong>Command-Line Interface:</strong> Operates entirely through the terminal, making it lightweight and efficient.    </li>    <li>      <strong>Separate Executables:</strong> Provides two executables: one for encryption and another for decryption.    </li>  </ul>    <h3>Technical Details:</h3>  <ul>    <li><strong>Language:</strong> Developed in Go for high performance and simplicity.</li>    <li><strong>Encryption Algorithm:</strong> Utilizes a robust cryptographic algorithm to ensure data security.</li>    <li><strong>Terminal Commands:</strong> Intuitive command-line options for specifying the folder path and execution mode.</li>    <li><strong>Cross-Platform:</strong> Compatible with multiple operating systems, including Windows, macOS, and Linux.</li>  </ul>    <h3>Highlights:</h3>  <ul>    <li><strong>Security:</strong> Ensures the confidentiality of sensitive data by encrypting all files in a folder.</li>    <li><strong>Simplicity:</strong> Minimalist design with an easy-to-use terminal interface.</li>    <li><strong>Efficiency:</strong> Optimized for fast encryption and decryption of large folders.</li>  </ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "Golang",
        "github": "https://github.com/minwolf999/Encryption.git",
        "images": ["static/image/personnal/Encryption/crypt.png", "static/image/personnal/Encryption/decrypt.png"]
    },

    {
        "type": 1,
        "title": "chat",
        "description": "<p>    <strong>Private Chat Application</strong> is a real-time messaging system inspired by the Net-Cat project. It allows users to securely communicate with one another via an intuitive web interface. The backend is powered by a Go server and an SQLite database, while the frontend is crafted using HTML, CSS, and JavaScript for an engaging and seamless user experience.  </p>    <h3>Main Features:</h3>  <ul>    <li>      <strong>Secure Login:</strong> Users must authenticate themselves to access the chat platform.    </li>    <li>      <strong>Direct Messaging:</strong> Initiate conversations by entering the email address of the person you want to chat with.    </li>    <li>      <strong>Real-Time Messaging:</strong> Messages are displayed instantly using WebSocket technology for a seamless user experience.    </li>    <li>      <strong>Persistent Data:</strong> All messages and user information are securely stored in an SQLite database.    </li>    <li>      <strong>Modern Interface:</strong> Responsive and visually appealing design built with HTML, CSS, and JavaScript.    </li>  </ul>    <h3>Technical Details:</h3>  <ul>    <li><strong>Backend:</strong> Developed with Go for high performance and scalability.</li>    <li><strong>Frontend:</strong> Built with HTML, CSS, and JavaScript for an interactive and user-friendly experience.</li>    <li><strong>Database:</strong> SQLite database stores user credentials, messages, and chat history securely.</li>    <li><strong>Real-Time Communication:</strong> WebSocket technology ensures low-latency messaging and instant updates.</li>    <li><strong>Security:</strong> User authentication and encrypted connections safeguard privacy.</li>  </ul>    <h3>Frontend Highlights:</h3>  <ul>    <li>      <strong>Dynamic Messaging Interface:</strong> JavaScript ensures smooth updates to the chat window without requiring page reloads.    </li>    <li>      <strong>Responsive Design:</strong> CSS ensures the chat application is accessible and visually appealing on all devices.    </li>    <li>      <strong>Interactive Elements:</strong> Buttons, forms, and modal dialogs enhance the user experience.    </li>  </ul>    <h3>Highlights:</h3>  <ul>    <li><strong>Real-Time Experience:</strong> Enjoy instant message delivery and updates.</li>    <li><strong>Personalized Conversations:</strong> Chat directly with selected contacts without distractions.</li>    <li><strong>Frontend and Backend Synergy:</strong> Responsive and interactive frontend coupled with a robust Go backend ensures smooth operation.</li>  </ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "Golang, Javascript",
        "github": "https://github.com/minwolf999/chat.git",
        "images": ["./static/image/personnal/chat/launch.png", "./static/image/personnal/chat/login.png", "./static/image/personnal/chat/chat.png"]
    },

    {
        "type": 1,
        "title": "PowerPoint Generator",
        "description": "<p>    <strong>Dynamic PowerPoint Generator</strong> is a desktop application built with Python and Tkinter. This intuitive tool allows users to create custom PowerPoint presentations by adding text and images with precise placement on each slide. A real-time preview system ensures that users can visualize their slides before finalizing the presentation.  </p>    <h3>Main Features:</h3>  <ul>    <li>      <strong>Custom Slide Creation:</strong> Add text and images to slides and position them exactly where you want.    </li>    <li>      <strong>Real-Time Preview:</strong> See live updates of your slide design as you edit.    </li>    <li>      <strong>Export to PowerPoint:</strong> Generate a fully formatted .ppt file with the click of a button.    </li>    <li>      <strong>Intuitive Interface:</strong> Tkinter-powered GUI ensures ease of use for beginners and advanced users alike.    </li>  </ul>    <h3>Technical Details:</h3>  <ul>    <li><strong>Framework:</strong> Developed using Python's Tkinter library for the graphical user interface.</li>    <li><strong>Backend Logic:</strong> Handles precise placement of elements and efficient slide generation.</li>    <li><strong>PowerPoint Integration:</strong> Utilizes Python libraries (e.g., python-pptx) to create PowerPoint files.</li>    <li><strong>Cross-Platform:</strong> Runs seamlessly on Windows, macOS, and Linux.</li>  </ul>    <h3>Usage Workflow:</h3>  <ol>    <li>Enter text content and select images for your slide.</li>    <li>Use the drag-and-drop interface or input precise coordinates for element placement.</li>    <li>Preview the slide layout in real-time on the adjacent panel.</li>    <li>Click \"Generate\" to create and save your PowerPoint file.</li>  </ol>    <h3>Frontend Highlights:</h3>  <ul>    <li>      <strong>Real-Time Updates:</strong> The preview panel updates dynamically as users make changes.    </li>    <li>      <strong>Responsive Layout:</strong> Tkinter's grid and pack layouts ensure a well-organized interface.    </li>    <li>      <strong>Interactive Controls:</strong> Buttons, entry fields, and drag-and-drop functionality make the app easy to navigate.    </li>  </ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "Python, JSON",
        "github": "https://github.com/minwolf999/powerpoint_generator.git",
        "images": ["./static/image/personnal/powerpoint_generator/home.png", "./static/image/personnal/powerpoint_generator/addPage.png",
            "./static/image/personnal/powerpoint_generator/addText.png", "./static/image/personnal/powerpoint_generator/addImage.png"]
    },

    {
        "type": 1,
        "title": "File Storage",
        "description": "<p>    <strong>File Management System</strong> is a web application designed to store, retrieve, update, and delete files efficiently. The project is divided into two main parts: a backend server written in Go and a React.js frontend. It uses a SQLite database to securely manage file data. There is 3 versions of the project on the 3 differents branch of the repository: 1 terminal only (in Golang), 1 in website (with React.js frontend and with a Golang backend), 1 in react-native app (with Golang backend and React-native Expo frontend) </p>    <h3>Main Features:</h3>  <ul>    <li>      <strong>File Operations:</strong> Add, retrieve, update, and delete files through an intuitive web interface.    </li>    <li>      <strong>Frontend-Backend Communication:</strong> Seamless communication between the React.js frontend and the Go backend using RESTful APIs.    </li>    <li>      <strong>Database Management:</strong> Files and metadata are securely stored and managed in a SQLite database.    </li>    <li>      <strong>User-Friendly Interface:</strong> React.js frontend provides a clean and responsive UI for managing files.    </li>  </ul>    <h3>Technical Details:</h3>  <ul>    <li>      <strong>Backend:</strong> Built with Go, providing RESTful endpoints for CRUD operations.    </li>    <li>      <strong>Frontend:</strong> Developed using React.js for a dynamic and interactive user experience.    </li>    <li>      <strong>Database:</strong> SQLite is used for lightweight and efficient file data storage.    </li>    <li>      <strong>API Design:</strong> Follows RESTful principles for easy integration and scalability.    </li>  </ul>    <h3>Usage Workflow:</h3>  <ol>    <li>Users can upload files via the React.js frontend.</li>    <li>Files are securely stored in the SQLite database through backend APIs.</li>    <li>Users can view, edit, or delete files directly from the web interface.</li>    <li>Changes are immediately reflected across the system.</li>  </ol>    <h3>Backend Highlights:</h3>  <ul>    <li>      <strong>CRUD Operations:</strong> Implements Create, Read, Update, and Delete functionality for files.    </li>    <li>      <strong>Go Framework:</strong> Ensures high performance and minimal resource usage.    </li>    <li>      <strong>Database Integration:</strong> Uses SQLite for simple and efficient data storage.    </li>  </ul>    <h3>Frontend Highlights:</h3>  <ul>    <li>      <strong>Responsive Design:</strong> The React.js frontend adapts to different screen sizes for an optimal user experience.    </li>    <li>      <strong>Dynamic UI:</strong> Provides instant feedback to the user with state updates and animations.    </li>    <li>      <strong>File Previews:</strong> Allows users to preview files before downloading or editing.    </li>  </ul>",
        "collaborators": ["Antoine MARVIN"],
        "langage": "Golang, SQLite, Javascript, React, React-native",
        "github": "https://github.com/minwolf999/File-Storage.git",
        "images": ["./static/image/personnal/file_storage/starting.png", "./static/image/personnal/file_storage/save.png",
            "./static/image/personnal/file_storage/getting.png"]
    }
]